{"ast":null,"code":"import { _saveQuestion, _saveQuestionAnswer } from \"../utils/_DATA\";\nimport { updateUserAnswers, updateUserQuestions } from \"./users\";\nexport const RECEIVE_QUESTIONS = \"RECEIVE_QUESTIONS\";\nexport const ADD_QUESTION = \"ADD_QUESTION\";\nexport const ADD_ANSWER = \"ADD_ANSWER\";\nexport function receiveQuestions(questions) {\n  return {\n    type: RECEIVE_QUESTIONS,\n    questions\n  };\n}\n\nfunction addQuestion(question) {\n  return {\n    type: ADD_QUESTION,\n    question\n  };\n}\n\nconst saveQuestion = async questionInfo => {\n  try {\n    const result = await fetch(\"http://127.0.0.1:8000/api/addQuestion\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        question_id: answerInfo.qid,\n        user_id: answerInfo.authedUser,\n        option: answerInfo.answer\n      })\n    });\n\n    if (!result.ok) {\n      console.log(\"error\");\n      throw new Error(`Error: Status ${result.status}`);\n    }\n  } catch (error) {\n    return alert(\"Error occured\");\n  }\n};\n\nexport function handleAddQuestion(optionOneText, optionTwoText) {\n  return async (dispatch, getState) => {\n    const {\n      authedUser\n    } = getState();\n    return saveQuestion({\n      optionOneText,\n      optionTwoText,\n      authedUser\n    }).then(question => {// dispatch(addQuestion({optionOneText, optionTwoText, authedUser}));\n      // dispatch(updateUserQuestions(question.id, authedUser));\n    });\n  };\n}\n\nfunction addAnswer(answer) {\n  return {\n    type: ADD_ANSWER,\n    answer\n  };\n}\n\nconst saveAnswer = async answerInfo => {\n  try {\n    const result = await fetch(\"http://127.0.0.1:8000/api/addVote\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        question_id: answerInfo.qid,\n        user_id: answerInfo.authedUser,\n        option: answerInfo.answer\n      })\n    });\n\n    if (!result.ok) {\n      console.log(\"error\");\n      throw new Error(`Error: Status ${result.status}`);\n    }\n  } catch (error) {\n    return alert(\"Error occured\");\n  }\n};\n\nexport function handleAddAnswer(answerInfo) {\n  return async dispatch => {\n    return saveAnswer(answerInfo).then(() => {\n      dispatch(addAnswer(answerInfo));\n      dispatch(updateUserAnswers(answerInfo));\n    });\n  };\n}","map":{"version":3,"names":["_saveQuestion","_saveQuestionAnswer","updateUserAnswers","updateUserQuestions","RECEIVE_QUESTIONS","ADD_QUESTION","ADD_ANSWER","receiveQuestions","questions","type","addQuestion","question","saveQuestion","questionInfo","result","fetch","method","headers","Accept","body","JSON","stringify","question_id","answerInfo","qid","user_id","authedUser","option","answer","ok","console","log","Error","status","error","alert","handleAddQuestion","optionOneText","optionTwoText","dispatch","getState","then","addAnswer","saveAnswer","handleAddAnswer"],"sources":["/home/talha/Documents/Laravel With React/Employees poll project with laravel/employee-polls-web-app/src/actions/questions.js"],"sourcesContent":["import { _saveQuestion, _saveQuestionAnswer } from \"../utils/_DATA\";\nimport { updateUserAnswers, updateUserQuestions } from \"./users\";\n\nexport const RECEIVE_QUESTIONS = \"RECEIVE_QUESTIONS\";\nexport const ADD_QUESTION = \"ADD_QUESTION\";\nexport const ADD_ANSWER = \"ADD_ANSWER\";\n\nexport function receiveQuestions(questions) {\n\treturn {\n\t\ttype: RECEIVE_QUESTIONS,\n\t\tquestions,\n\t};\n}\n\nfunction addQuestion(question) {\n\treturn {\n\t\ttype: ADD_QUESTION,\n\t\tquestion,\n\t};\n}\n\nconst saveQuestion = async (questionInfo) => {\n    try {\n        const result = await fetch(\"http://127.0.0.1:8000/api/addQuestion\", {\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                question_id: answerInfo.qid,\n                user_id: answerInfo.authedUser,\n                option: answerInfo.answer,\n            }),\n        });\n\n        if (!result.ok) {\n            console.log(\"error\");\n            throw new Error(`Error: Status ${result.status}`);\n        }\n    } catch (error) {\n        return alert(\"Error occured\");\n    }\n}\n\nexport function handleAddQuestion(optionOneText, optionTwoText) {\n\treturn async (dispatch, getState) => {\n\t\tconst { authedUser } = getState();\n\n\t\treturn saveQuestion({\n\t\t\toptionOneText,\n\t\t\toptionTwoText,\n\t\t\tauthedUser,\n\t\t}).then((question) => {\n\t\t\t// dispatch(addQuestion({optionOneText, optionTwoText, authedUser}));\n\t\t\t// dispatch(updateUserQuestions(question.id, authedUser));\n\t\t});\n\t};\n}\n\nfunction addAnswer(answer) {\n\treturn {\n\t\ttype: ADD_ANSWER,\n\t\tanswer,\n\t};\n}\n\nconst saveAnswer = async (answerInfo) => {\n    try {\n        const result = await fetch(\"http://127.0.0.1:8000/api/addVote\", {\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                question_id: answerInfo.qid,\n                user_id: answerInfo.authedUser,\n                option: answerInfo.answer,\n            }),\n        });\n\n        if (!result.ok) {\n            console.log(\"error\");\n            throw new Error(`Error: Status ${result.status}`);\n        }\n    } catch (error) {\n        return alert(\"Error occured\");\n    }\n}\n\nexport function handleAddAnswer(answerInfo) {\n\treturn async (dispatch) => {\n\t\treturn saveAnswer(answerInfo).then(() => {\n            dispatch(addAnswer(answerInfo));\n            dispatch(updateUserAnswers(answerInfo));\n        });\n\t};\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}